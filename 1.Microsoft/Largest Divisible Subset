class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        vector<int> index(n,-1), dp(n+1,1);
        sort(nums.begin(),nums.end());
        int maxLen=1;
        int idx=0;
        for(int i=1;i<n;i++)
        {
            for(int j=i-1;j>=0;j--)
            {
                if(nums[i]%nums[j]==0 || nums[j]%nums[i]==0)
                {
                    if(dp[i] < 1 + dp[j])
                    {
                        dp[i]=1+dp[j];
                        index[i]=j;
                        if(maxLen<dp[i])
                        {
                            idx=i;
                            maxLen=dp[i];
                        }
                    }
                }
            }
        }
        vector<int> res;
        int j = idx;
        while(j>=0)
        {
            res.push_back(nums[j]);
            j=index[j];
        }
        reverse(res.begin(),res.end());
        return res;
    }
};
