class Solution {
public:
    int d;
    long long mergeSort(vector<int> &v, int start, int mid, int end)
    {
        long long count = 0;
        int i = start;
        int j = mid+1;
        while(i<=mid && j<=end)
        {
            if(v[i] <= v[j] + d)
            {
                count += (end - j + 1);
                i++;
            }
            else
            {
                j++;
            }
        }
        sort(v.begin() + start, v.begin() + end + 1);
        return count;
    }

    long long merge(vector<int> &nums, int start, int end)
    {
        long long count = 0;
        if(start < end)
        {
            int mid = start + (end - start)/2;
            count += merge(nums,start,mid);
            count += merge(nums,mid+1,end);
            count += mergeSort(nums, start, mid, end);
        }
        return count;
    }

    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int diff) {
        vector<int> v;
        d = diff;
        for(int i=0;i<nums1.size();i++)
        {
            v.push_back(nums1[i] - nums2[i]);
        }
        return merge(v,0,v.size()-1);
    }
};
